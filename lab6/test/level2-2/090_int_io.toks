CONST	const
INT	int
ID	ascii_0
ASSIGN	=
DECIMAL	48	48
SEMICOLON	;
INT	int
ID	my_getint
LPAREN	(
RPAREN	)
LBRACE	{
INT	int
ID	sum
ASSIGN	=
DECIMAL	0	0
COMMA	,
ID	c
SEMICOLON	;
WHILE	while
LPAREN	(
DECIMAL	1	1
RPAREN	)
LBRACE	{
ID	c
ASSIGN	=
LPAREN	(
RPAREN	)
SUB	-
ID	ascii_0
SEMICOLON	;
IF	if
LPAREN	(
ID	c
LESS	<
DECIMAL	0	0
OR	||
ID	c
GT	>
DECIMAL	9	9
RPAREN	)
LBRACE	{
CONTINUE	continue
SEMICOLON	;
RBRACE	}
ELSE	else
LBRACE	{
BREAK	break
SEMICOLON	;
RBRACE	}
RBRACE	}
ID	sum
ASSIGN	=
ID	c
SEMICOLON	;
WHILE	while
LPAREN	(
DECIMAL	1	1
RPAREN	)
LBRACE	{
ID	c
ASSIGN	=
LPAREN	(
RPAREN	)
SUB	-
ID	ascii_0
SEMICOLON	;
IF	if
LPAREN	(
ID	c
GE	>=
DECIMAL	0	0
AND	&&
ID	c
LE	<=
DECIMAL	9	9
RPAREN	)
LBRACE	{
ID	sum
ASSIGN	=
ID	sum
MUL	*
DECIMAL	10	10
ADD	+
ID	c
SEMICOLON	;
RBRACE	}
ELSE	else
LBRACE	{
BREAK	break
SEMICOLON	;
RBRACE	}
RBRACE	}
RETURN	return
ID	sum
SEMICOLON	;
RBRACE	}
VOID	void
ID	my_putint
LPAREN	(
INT	int
ID	a
RPAREN	)
LBRACE	{
INT	int
ID	b
LSBRAC	[
DECIMAL	16	16
RSBRAC	]
COMMA	,
ID	i
ASSIGN	=
DECIMAL	0	0
SEMICOLON	;
WHILE	while
LPAREN	(
ID	a
GT	>
DECIMAL	0	0
RPAREN	)
LBRACE	{
ID	b
LSBRAC	[
ID	i
RSBRAC	]
ASSIGN	=
ID	a
MOD	%
DECIMAL	10	10
ADD	+
ID	ascii_0
SEMICOLON	;
ID	a
ASSIGN	=
ID	a
DIV	/
DECIMAL	10	10
SEMICOLON	;
ID	i
ASSIGN	=
ID	i
ADD	+
DECIMAL	1	1
SEMICOLON	;
RBRACE	}
WHILE	while
LPAREN	(
ID	i
GT	>
DECIMAL	0	0
RPAREN	)
LBRACE	{
ID	i
ASSIGN	=
ID	i
SUB	-
DECIMAL	1	1
SEMICOLON	;
LPAREN	(
ID	b
LSBRAC	[
ID	i
RSBRAC	]
RPAREN	)
SEMICOLON	;
RBRACE	}
RBRACE	}
INT	int
ID	main
LPAREN	(
RPAREN	)
LBRACE	{
INT	int
ID	n
ASSIGN	=
ID	my_getint
LPAREN	(
RPAREN	)
SEMICOLON	;
WHILE	while
LPAREN	(
ID	n
GT	>
DECIMAL	0	0
RPAREN	)
LBRACE	{
INT	int
ID	m
ASSIGN	=
ID	my_getint
LPAREN	(
RPAREN	)
SEMICOLON	;
ID	my_putint
LPAREN	(
ID	m
RPAREN	)
SEMICOLON	;
LPAREN	(
DECIMAL	10	10
RPAREN	)
SEMICOLON	;
ID	n
ASSIGN	=
ID	n
SUB	-
DECIMAL	1	1
SEMICOLON	;
RBRACE	}
RETURN	return
DECIMAL	0	0
SEMICOLON	;
RBRACE	}
